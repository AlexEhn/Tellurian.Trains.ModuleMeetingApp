@page "/clockadmin"
@using Tellurian.Trains.MeetingApp.Shared;

@inject HttpClient Http
@inject IStringLocalizer<App> Localizer
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<h1>@Localizer["ClockSettings"]</h1>

<EditForm Model="@Settings">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="input-group input-group-lg">
        <div class="form-group">
            <label for="mode">@Localizer["Mode"]</label>
            <InputSelect Class="form-control" id="mode" @bind-Value="@Settings.Mode">
                <option value="-1">@Localizer["SelectClockMode"]</option>
                <option value="0">@Localizer["Fastclock"]</option>
                <option value="1">@Localizer["Realclock"]</option>
            </InputSelect>
        </div>
    </div>
    <div class="input-group input-group-lg">
        <div class="form-group">
            <label for="starttime">@Localizer["GameStartTime"]</label>
            @if (Settings.IsRunning)
            {
                <input class="form-control" disabled value="@Settings.StartTime" />
            }
            else
            {
                <InputText Class="form-control" Id="starttime" @bind-Value="@Settings.StartTime" />
            }
        </div>
        <div class="form-group">
            <label for="elapsed">@Localizer["SetNewCurrentTime"]</label>
            <InputText Class="form-control" id="elapsed" @bind-Value="@Settings.OverriddenElapsedTime" />
        </div>
    </div>
    <div class="input-group input-group-lg">
        <div class="form-group">
            <label for="duration">@Localizer["GameDuration"]</label>
            <InputNumber Class="form-control" id="duration" TValue="double?" @bind-Value="@Settings.DurationHours" />
        </div>
        <div class="form-group">
            <label for="speed">@Localizer["Speed"]</label>
            <InputNumber Class="form-control" id="speed" TValue="double?" @bind-Value="@Settings.Speed" />
        </div>
        <div class="form-group">
            <label for="weekday">@Localizer["Weekday"]</label>
            <InputSelect Class="form-control" id="weekday" @bind-Value="@Settings.StartWeekday">
                @foreach (var item in EnumExtensions.Weekdays)
                {
                    <option value="@item.value">@Localizer[item.display]</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="input-group input-group-lg">
        <div class="form-group">
            <label for="elapsed">@Localizer["PauseAtRealTime"]</label>
            <InputText Class="form-control" id="elapsed" @bind-Value="@Settings.PauseTime" />
        </div>
        <div class="form-group">
            <label for="elapsed">@Localizer["PauseReason"]</label>
            <InputSelect Class="form-control" id="pauseReason" @bind-Value="@Settings.PauseReason">
                @foreach (var item in EnumExtensions.PauseReasons)
                {
                    <option value="@item.value">@Localizer[item.display]</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="elapsed">@Localizer["ExpectedResumeTime"]</label>
            <InputText Class="form-control" id="elapsed" @bind-Value="@Settings.ExpectedResumeTime" />
        </div>
    </div>
    <div class="form-check">
        <InputCheckbox Class="form-check-input" @bind-Value="@Settings.ShowRealTimeWhenPaused" />
        <label class="form-check-label" for="running">@Localizer["ShowRealTimeWhenPaused"]</label>
    </div>
    <div class="form-group ">
        <label for="message">@Localizer["Message"]</label>
        <InputTextArea Class="form-control " id="message" @bind-Value="@Settings.Message" />
    </div>

    <div class="form-check">
        <InputCheckbox Class="form-check-input" @bind-Value="@Settings.IsRunning" />
        <label class="form-check-label" for="running">@Localizer["IsRunning"]</label>
    </div>
    <br />
    @if (Registration.IsRegistered() && Registration.Password == Settings.Password)
    {
        <div>
            <button class="btn btn-info" type="submit" @onclick="async () => await Refresh()">@Localizer["Refresh"]</button>
            <button class="btn btn-primary" type="submit" @onclick="async () => await Update()">@Localizer["Apply"]</button>
            @if (Settings.Mode == "0")
            {
                @if (Settings.IsRunning)
                {
                    <button class="btn btn-danger" type="submit" @onclick="async () => await Stop()">@Localizer["Stop"]</button>
                }
                else
                {
                    <button class="btn btn-success" type="submit" @onclick="async () => await Start()">@Localizer["Start"]</button>
                    <button class="btn btn-warning" type="submit" @onclick="async () => await Reset()">@Localizer["Restart"]</button>
                }
            }
        </div>
    }
    else
    {
        <div>
            @Localizer["RegisterNameAndPassword"].
        </div>
    }
</EditForm>

@code {
    ClockSettings Settings = new ClockSettings();
    Registration Registration = new Registration();

    protected override async Task OnInitializedAsync()
    {
        Registration = await GetRegistration();
        await Refresh();
    }

    private async Task Reset()
    {
        Settings.ShouldRestart = true;
        await Update();
    }

    private async Task Update()
    {
        await Http.PostAsJsonAsync<ClockSettings>($"api/Clock/UpdateSettings/Default?apiKey={ClockSettings.ClockApiKey}", Settings);
        await Refresh();
        this.StateHasChanged();
    }

    private async Task Refresh()
    {
        Settings = await Http.GetFromJsonAsync<ClockSettings>("api/Clock/Settings/Default");
    }

    private async Task Start()
    {
        var result = await Http.GetAsync($"api/Clock/Start/Default?apiKey={ClockSettings.ClockApiKey}&user={Registration?.Name}&password={Registration?.Password}");
        await Refresh();
        this.StateHasChanged();
    }

    private async Task Stop()
    {
        var result = await Http.GetAsync($"api/Clock/Stop/Default?apiKey={ClockSettings.ClockApiKey}&user={Registration?.Name}&reason={nameof(Tellurian.Trains.Clocks.Server.StopReason.Other)}");
        await Refresh();
        this.StateHasChanged();
    }

    private async Task<Registration> GetRegistration()
    {
        if (await LocalStorage.ContainKeyAsync(Registration.Key))
        {
            return await LocalStorage.GetItemAsync<Registration>(Registration.Key);
        }
        else
        {
            return new Registration();
        }
    }
}
